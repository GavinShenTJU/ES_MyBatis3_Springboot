server.port=8080

spring.shardingsphere.datasource.names=ds0,ds1

#ds0
spring.shardingsphere.datasource.ds0.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.ds0.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.ds0.jdbc-url=jdbc:mysql://localhost:3306/test-db?characterEncoding=UTF-8
spring.shardingsphere.datasource.ds0.username=root
spring.shardingsphere.datasource.ds0.password=1qaz@WSX

#ds1
spring.shardingsphere.datasource.ds1.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.ds1.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.ds1.jdbc-url=jdbc:mysql://localhost:3306/test-db1?characterEncoding=UTF-8
spring.shardingsphere.datasource.ds1.username=root
spring.shardingsphere.datasource.ds1.password=1qaz@WSX

#配置数据节点
spring.shardingsphere.sharding.tables.t_product.actual-data-nodes=ds$->{0..1}.t_product_$->{0..1}

#spring.shardingsphere.sharding.tables.t_product.actual-data-nodes=ds0.t_product_$->{0..1}
#spring.shardingsphere.sharding.tables.t_product.database-strategy.inline.sharding-column=id
#spring.shardingsphere.sharding.tables.t_product.database-strategy.inline.algorithm-expression=ds$->{id % 2}
#spring.shardingsphere.sharding.tables.t_product.table-strategy.inline.sharding-column=price
#spring.shardingsphere.sharding.tables.t_product.table-strategy.inline.algorithm-expression=t_product_$->{price % 2}

#配置分库规则
spring.shardingsphere.sharding.tables.t_product.database-strategy.inline.sharding-column=sharding_id
spring.shardingsphere.sharding.tables.t_product.database-strategy.inline.algorithm-expression=ds$->{sharding_id % 2}
spring.shardingsphere.sharding.tables.t_product.key-generator.column=sharding_id
spring.shardingsphere.sharding.tables.t_product.key-generator.type=SNOWFLAKE
spring.shardingsphere.sharding.tables.t_product.key-generator.props.worker.id=1


# t_product，分片策略包括【分片键和分片算法】
#spring.shardingsphere.sharding.tables.t_product.table-strategy.inline.sharding-column=id
#spring.shardingsphere.sharding.tables.t_product.table-strategy.inline.algorithm-expression=t_product_$->{id % 2}
spring.shardingsphere.sharding.tables.t_product.table-strategy.standard.sharding-column=price
spring.shardingsphere.sharding.tables.t_product.table-strategy.standard.precise-algorithm-class-name=com.chendi.elasticsearch.demo.config.PreciseShardingAlgorithmForPrice
spring.shardingsphere.sharding.tables.t_product.table-strategy.standard.range-algorithm-class-name=com.chendi.elasticsearch.demo.config.RangeShardingAlgorithmForPrice
spring.shardingsphere.props.sql.show=true



#返回json的全局时间格式
spring.jackson.date-format=yyyy-MM-dd HH:mm:ss
spring.jackson.time-zone=GMT+8


# 单数据源设置
#spring.datasource.url=jdbc:mysql://localhost:3306/test-db?serverTimezone=GMT%2B8
#spring.datasource.username=root
#spring.datasource.password=1qaz@WSX
#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# jpa 相关设置
#spring.jpa.show-sql=true
#spring.jpa.open-in-view=false
#spring.jpa.hibernate.ddl-auto = update

mybatis-plus.mapper-locations=classpath:/mapper/*.xml
mybatis-plus.type-aliases-package=com.chendi.elasticsearch.demo.entity.mybatis

es.host=127.0.0.1
es.port=9200

spring.thymeleaf.cache=false
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.encoding=UTF-8
spring.thymeleaf.suffix=.html
spring.thymeleaf.mode=HTML
